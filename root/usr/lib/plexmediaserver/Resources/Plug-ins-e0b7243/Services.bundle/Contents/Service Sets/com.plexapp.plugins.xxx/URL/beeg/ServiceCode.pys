API_URL = 'http://beeg.com/api/v4/video/%s'

THUMB_URL_720 = 'http://img.beeg.com/1280x720/%s.jpg'
THUMB_URL_360 = 'http://img.beeg.com/640x360/%s.jpg'
THUMB_URL_ORIG = 'http://img.beeg.com/236x177/%s.jpg'

####################################################################################################
def NormalizeURL(url):

	return url.split('?')[0].rstrip('/')

####################################################################################################
def MetadataObjectForURL(url):

	video_id = url.split('/')[-1]
	json_obj = JSON.ObjectFromURL(API_URL % (video_id))

	title = json_obj['title']
	summary = json_obj['desc']
	originally_available_at = Datetime.ParseDate(json_obj['date']).date()
	duration = int(json_obj['duration']) * 1000 if 'duration' in json_obj and json_obj['duration'] != '' else None
	tags = [tag for tag in json_obj['tags'].split(', ')] if json_obj['tags'] and len(json_obj['tags']) > 0 else []

	thumb_1 = THUMB_URL_720 % (video_id)
	thumb_2 = THUMB_URL_360 % (video_id)
	thumb_3 = THUMB_URL_ORIG % (video_id)

	return VideoClipObject(
		title = title,
		summary = summary,
		originally_available_at = originally_available_at,
		duration = duration,
		tags = tags,
		thumb = Resource.ContentsOfURLWithFallback([thumb_1, thumb_2, thumb_3]),
		content_rating = 'X'
	)

####################################################################################################
def MediaObjectsForURL(url):

	if Client.Product == 'Plex Web':

		return [
			MediaObject(
				video_resolution = video_resolution,
				optimized_for_streaming = False,
				parts = [
					PartObject(
						key = Callback(PlayVideo, url=url, res=video_resolution)
					)
				]
			) for video_resolution in ['720', '480']
		]

	else:

		return [
			MediaObject(
				container = Container.MP4,
				video_codec = VideoCodec.H264,
				video_resolution = video_resolution,
				audio_codec = AudioCodec.AAC,
				audio_channels = 2,
				optimized_for_streaming = True,
				parts = [
					PartObject(
						key = Callback(PlayVideo, url=url, res=video_resolution)
					)
				]
			) for video_resolution in ['720', '480']
		]

####################################################################################################
@indirect
def PlayVideo(url, res='720', **kwargs):

	video_id = url.split('/')[-1]
	json_obj = JSON.ObjectFromURL(API_URL % (video_id))

	if res == '720' and '720p' in json_obj and json_obj['720p']:
		video_url = json_obj['720p']
	elif '480p' in json_obj:
		video_url = json_obj['480p']
	else:
		raise Ex.MediaNotAvailable

	video_url = video_url.replace('{DATA_MARKERS}', 'data=pc.XX')
	video_url = 'http://%s' % (video_url.split('//')[-1])

	return IndirectResponse(VideoClipObject, key=video_url)
