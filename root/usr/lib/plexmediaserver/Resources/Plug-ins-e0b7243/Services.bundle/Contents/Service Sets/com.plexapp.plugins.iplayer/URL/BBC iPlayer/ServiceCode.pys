HTTP_HEADERS = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.115 Safari/537.36'}

RE_PID = Regex('iplayer/episode/([^/$]{8})')
RE_VPID = Regex('"vpid" *: *"(.+?)"')

HLS_CLIENTS = ['Android', 'iOS', 'Roku', 'Safari', 'tvOS']

####################################################################################################
def NormalizeURL(url):

    return url

####################################################################################################
def MetadataObjectForURL(url):

    pid = RE_PID.findall(url)[0]
    programme = JSON.ObjectFromURL('http://www.bbc.co.uk/programmes/%s.json' % (pid), headers=HTTP_HEADERS)['programme']

    if 'image' in programme and 'pid' in programme['image'] and programme['image']['pid']:
        thumb = 'http://ichef.bbci.co.uk/programmeimages/%s/%s_640_360.jpg' % (programme['image']['pid'], pid)
    else:
        thumb = 'http://node2.bbcimg.co.uk/iplayer/images/episode/%s_640_360.jpg' % (pid)

    if 'long_synopsis' in programme and programme['long_synopsis']:
        summary = programme['long_synopsis']
    elif 'medium_synopsis' in programme and programme['medium_synopsis']:
        summary = programme['medium_synopsis']
    elif 'short_synopsis' in programme and programme['short_synopsis']:
        summary = programme['short_synopsis']
    else:
        summary = ''

    if 'first_broadcast_date' in programme and programme['first_broadcast_date']:
        originally_available_at = Datetime.ParseDate(programme['first_broadcast_date']).date()
    else:
        originally_available_at = None

    duration = programme['versions'][0]['duration'] if programme['versions'][0]['duration'] else 0

    for version in programme['versions']:
        if version['types'][0] == 'iPlayer version':
            duration = version['duration'] if version['duration'] else duration
            break

    if 'parent' in programme:
        parent_programme = programme['parent']['programme']

        if parent_programme['type'] in ('series', 'episode'):
            # Create an EpisodeObject...
            show_title = parent_programme['parent']['programme']['title'] if 'parent' in parent_programme else parent_programme['title']
            episode_title = programme['display_title']['subtitle']

            try: season = parent_programme['position']
            except: season = None

            try: episode = programme['position']
            except: episode = None

            return EpisodeObject(
                show = show_title,
                title = episode_title,
                season = season,
                index = episode,
                summary = summary,
                originally_available_at = originally_available_at,
                duration = duration * 1000,
                thumb = Resource.ContentsOfURLWithFallback(url=thumb)
            )

        elif programme['parent']['programme']['type'] == 'brand':
            # Create a VideoClipObject...
            title = programme['display_title']['title']

            return VideoClipObject(
                title = title,
                summary = summary,
                originally_available_at = originally_available_at,
                duration = duration * 1000,
                thumb = Resource.ContentsOfURLWithFallback(url=thumb)
            )

    elif 'categories' in programme:
        if programme['categories'] and len(programme['categories']) > 0:

            for category in programme['categories']:
                # If this is a film...
                if category['title'] == 'Films':
                    # Create a MovieObject...
                    title = programme['display_title']['title']

                    return MovieObject(
                        title = title,
                        summary = summary,
                        originally_available_at = originally_available_at,
                        duration = duration * 1000,
                        thumb = Resource.ContentsOfURLWithFallback(url=thumb)
                    )

                else:
                    # Create a VideoClipObject...
                    title = programme['display_title']['title']

                    return VideoClipObject(
                        title = title,
                        summary = summary,
                        originally_available_at = originally_available_at,
                        duration = duration * 1000,
                        thumb = Resource.ContentsOfURLWithFallback(url=thumb)
                    )

        else:
            title = programme['title']

            return VideoClipObject(
                title = title,
                summary = summary,
                originally_available_at = originally_available_at,
                duration = duration * 1000,
                thumb = Resource.ContentsOfURLWithFallback(url=thumb)
            )

####################################################################################################
@deferred
def MediaObjectsForURL(url):

    try:
        content = HTTP.Request(url).content
        vpid = RE_VPID.search(content).groups()[0]
    except:
        raise Ex.MediaNotAvailable

    media_selector_url = 'http://open.live.bbc.co.uk/mediaselector/5/select/version/2.0/format/json/mediaset/apple-ipad-hls/vpid/%s' % (vpid)

    return [
        MediaObject(
            protocol = 'hls',
            container = 'mpegts',
            video_codec = VideoCodec.H264,
            video_resolution = resolution,
            audio_codec = AudioCodec.AAC,
            audio_channels = 2,
            optimized_for_streaming = True,
            parts = [
                PartObject(
                    key = Callback(PlayVideo, post_url=media_selector_url, media_selector_url=media_selector_url, vpid=vpid, resolution=resolution, ext='m3u8')
                )
            ]
        ) for resolution in ['1080', '720', '540', '396', '288']
    ]

####################################################################################################
@indirect
def PlayVideo(media_selector_url='', vpid='', resolution='1080', **kwargs):

    if media_selector_url == '':
        raise Ex.MediaNotAvailable

    try:
        stream_details = HTTP.Request(media_selector_url, cacheTime=0).content
        stream_details = JSON.ObjectFromString(stream_details)
    except:
        raise Ex.MediaGeoblocked

    url = GetMaxBitrateURL(stream_details, 'hls')
    hls_url = None
    geoblock = False

    if url:
        hls_url = '%s/master.m3u8' % (url[:url.rfind('/')])

        try:
            headers = HTTP.Request(hls_url).headers

        except Ex.HTTPError, e:
            if e.code == 403:
                hls_url = url
                geoblock = True
            else:
                raise Ex.MediaNotAvailable

        except:
            try:
                stream_details = JSON.ObjectFromURL('http://open.live.bbc.co.uk/mediaselector/5/select/version/2.0/format/json/mediaset/pc/vpid/%s' % (vpid), cacheTime=0)

                id = GetMaxBitrateURL(stream_details, 'rtmp')

                if not id in url:
                    hls_url = url.replace(',.mp4.csmil', id + ',.mp4.csmil').replace('*~hmac', id + '*~hmac')

            except:
                hls_url = url
    else:
        raise Ex.MediaNotAvailable

    if Client.Platform in HLS_CLIENTS or geoblock:
        # These clients can handle HLS properly
        return IndirectResponse(
            VideoClipObject, key=HTTPLiveStreamURL(url=hls_url)
        )
    else:
        # Other clients have problems if returning the original URL:
        # - Plex/Web: 'No playable sources found'
        # - Chromecast: PMS is selecting a low res variant when remuxing for CC
        streams = GetHLSStreams(hls_url)

        min_resolution_diff = 1000000000 # some huge number to get it started
        hls_url = streams[0]['url'] # Fallback url = max bitrate url

        nearest_resolution = resolution
        for stream in streams:
            diff = abs(int(resolution) - stream['resolution'])

            if diff < min_resolution_diff:
                min_resolution_diff = diff
                nearest_resolution = stream['resolution']

        # Find url with highest bitrate for wanted resolution
        # There are usually at least 3 different versions per resolution
        # and the difference between them are the audio bitrate(96, 128, 320 etc)
        # We'll always choose the highest audio bitrate variant
        max_bitrate_found = 0
        for stream in streams:
            if nearest_resolution == stream['resolution']:
                if stream['bitrate'] > max_bitrate_found:
                    hls_url = stream['url']

        return IndirectResponse(
            VideoClipObject, key=HTTPLiveStreamURL(url=hls_url)
        )

####################################################################################################
def GetMaxBitrateURL(stream_details, transfer_format):

    max_bitrate_found = 0
    url = None

    if 'media' not in stream_details:
        return url

    for media in stream_details['media']:

        if media['kind'] == 'video':
            if int(media['bitrate']) > max_bitrate_found:

                for connection in media['connection']:
                    if 'akamai' in connection['supplier']:

                        if transfer_format == 'hls':
                            if 'transferFormat' in connection:
                                if 'hls' in connection['transferFormat']:
                                    url = connection['href']
                                    max_bitrate_found = int(media['bitrate'])

                        else:
                            if 'protocol' in connection:
                                if 'rtmp' in connection['protocol']:
                                    url = connection['identifier'].replace('mp4:iplayerstream/secure_auth/', ',').replace('.mp4', '').replace('mp4:secure/', ',')
                                    max_bitrate_found = int(media['bitrate'])

    return url

####################################################################################################
def GetHLSStreams(url):

    streams = []

    playList = HTTP.Request(url).content

    # Parse the m3u8 file to get:
    # - URL
    # - Resolution
    # - Bitrate
    for line in playList.splitlines():
        if 'BANDWIDTH' in line:
            stream = {}
            stream['bitrate'] = int(Regex('(?<=BANDWIDTH=)[0-9]+').search(line).group(0))

            if 'RESOLUTION' in line:
                stream['resolution'] = int(Regex('(?<=RESOLUTION=)[0-9]+x[0-9]+').search(line).group(0).split('x')[1])
            else:
                stream['resolution'] = 0

        elif '.m3u8' in line:
            path = ''

            if not line.startswith('http'):
                path = url[ : url.rfind('/') + 1]

            stream['url'] = path + line

            streams.append(stream)

    sorted_streams = sorted(streams, key=lambda stream: stream['bitrate'], reverse=True)

    return sorted_streams

####################################################################################################
def TestURLs():

    test_urls = []
    data = HTML.ElementFromURL('http://www.bbc.co.uk/iplayer')

    for item in data.xpath('//div[contains(@class, "most-popular")]//li/a'):
        video_url = item.get('href')
        if video_url.startswith('/'):
            video_url = 'http://www.bbc.co.uk' + video_url

            test_urls.append(video_url)

        if len(test_urls) > 3:
            break

    return test_urls
